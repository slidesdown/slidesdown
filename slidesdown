#!/usr/bin/env nu
# Documentation: https://www.nushell.sh/book/

use std/log

let VERSION = "1.0.1"
let IMAGE = $"slidesdown/slidesdown:($VERSION)"
let UPDATE_URL = "https://raw.githubusercontent.com/slidesdown/slidesdown/main/slidesdown"
let DECKTAPE_IMAGE = "ghcr.io/astefanutti/decktape:3.15.0"

def createTemplate [filename: path, url: string] {
  if ($filename | path exists) {
    log error $"File already exists: ($filename)"
    exit 1
  }
  http get $url | save $filename
  log info $"Created ($filename). Happy sliding :-)"
}

def updateScript [] {
  const SCRIPT_NAME = path self
  log info $"Updating ($SCRIPT_NAME), version ($VERSION), from ($UPDATE_URL)"
  let SCRIPT_TEMP = mktemp -t $"($SCRIPT_NAME | path basename)_XXXXX"
  http get $UPDATE_URL | save -f $SCRIPT_TEMP
  chmod a+x $SCRIPT_TEMP
  rm $SCRIPT_NAME
  mv $SCRIPT_TEMP $SCRIPT_NAME
  log info "New version:"
  run-external $SCRIPT_NAME "-v"
  log info "Update finished."
}

# Determines the program that can open URLs
def url-opener [
  no_open: bool
  # it no_open == true, no URL opener will be returned
] {
  if $no_open { ""
  } else if (which xdg-open | length) > 0 { "xdg-open"
  } else if (which open-cli | length) > 0 { "open-cli"
  } else if (which open | length) > 0 { "open"
  } else {
    log error "No command found to open URLs with. Supported: xdg-open, open-cli, open"
    ""
  }
}

# Runs a local webserver that serves the slides to the online slidesdown service
def create-webserver-cmd []: nothing -> string {
  let server_cmd = mktemp -t slidedown_http_server_XXXX.py
  "#!/usr/bin/env python3
# It's python3 -m http.server PORT for a CORS world
from http.server import HTTPServer, SimpleHTTPRequestHandler
import sys

class CORSRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', '*')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')
        return super(CORSRequestHandler, self).end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()

    def translate_path(self, path):
        # Strip /slides prefix from path to make it compatible with docker container
        return super().translate_path(path.lstrip('/slides/'))

host = sys.argv[1] if len(sys.argv) > 2 else 'localhost'
port = int(sys.argv[len(sys.argv)-1]) if len(sys.argv) > 1 else 8080

print('Listening on http://{}:{}'.format(host, port))
httpd = HTTPServer((host, port), CORSRequestHandler)
try:
    httpd.serve_forever()
except KeyboardInterrupt:
    print('Stopping http server')
    sys.exit(0)
" | save -f $server_cmd
  return $server_cmd
}

# Displays a markdown file as a slideshow.
# Attention: only the docker service provides hot-reloading when changes are made to the slideshow!
# Website: https://github.com/slidesdown/slidesdown
def main [
  filename: path = "SLIDES.md"
  # Path to file that contains the presentation (env: SLIDESDOWN_FILENAME)
  --service (-s): string = "slidesdown.github.io"
  # Online service to use for presenting the slideshow, instead of docker (env: SLIDESDOWN_SERVICE)
  --encode (-b)
  # Encode the whole slideshow document as base64 string in the URL so that the presentation can be shared via URL without it being publicly available (env: SLIDESDOWN_ENCODE)
  --docker (-d)
  # Run slideshow service locally via docker (default: run a local http server via Python3 and connect to the online service, env: SLIDESDOWN_DOCKER)
  --image (-i): string
  # Use docker image (env: SLIDESDOWN_IMAGE)"
  --multiplex (-m)
  # Open presentation in multiplex mode so that presenter and follower can always see the same slide - pairs well with the --publish flag (env: SLIDESDOWN_MULTIPLEX)
  --port (-p): int = 3000
  # Open slideshow service at port (env: SLIDESDOWN_PORT)
  --publish (-P)
  # Publish locally docker-hosted presentation on the internet via a CloudFlare tunnel (env: SLIDESDOWN_PUBLISH)
  --export (-e)
  # Export slideshow as PDF - if exporting from a local docker instance repeat the options that were used to start the service when using this option (env: SLIDESDOWN_EXPORT)
  --output (-o): string = "SLIDES.pdf"
  # Write export to this filename (env: SLIDESDOWN_OUTPUT)
  --resolution (-r): string = "1600x900"
  # Export resolution (env: SLIDESDOWN_RESOLUTION)'
  --template (-t)
  # Create SLIDES.md template (env: SLIDESDOWN_TEMPLATE)
  --template-url (-T): string = "https://raw.githubusercontent.com/slidesdown/slidesdown/main/examples/SLIDES.md"
  # Create SLIDES.md template (env: SLIDESDOWN_TEMPLATE_URL)
  --no-open (-n)
  # Do not open browser at the start (env: SLIDESDOWN_NO_OPEN)
  --update (-u)
  # Update slidesdown script (env: SLIDESDOWN_UPDATE)
  --verbose (-V)
  # Verbose log messages  (env: SLIDESDOWN_VERBOSE)
  --version (-v)
  # Print script version
]: nothing -> nothing {
  let use_version = $env | get -i SLIDESDOWN_VERSION | default $version | into bool
  let use_update = $env | get -i SLIDESDOWN_UPDATE | default $update | into bool
  let use_template = $env | get -i SLIDESDOWN_TEMPLATE | default $template | into bool
  let use_filename = $env | get -i SLIDESDOWN_FILENAME | default $filename | into string
  let root_directory = $use_filename | path expand | path dirname
  let slides_filename = $use_filename | path basename
  # The directory of the slides file becomes the root directory for all other services
  cd $root_directory
  if  $use_version {
    print -e $"slidesdown version: ($VERSION)"
    exit 0
  } else if $use_update {
    updateScript
  } else if $use_template {
    let use_template_url = ($env | get -i SLIDESDOWN_TEMPLATE_URL | default $template_url | into string)
    createTemplate $slides_filename $use_template_url
  } else {
    # Display slideshow
    if not ($slides_filename | path exists) {
      log error $"File not found: ($use_filename)"
      exit 1
    }
    let use_docker = $env | get -i SLIDESDOWN_DOCKER | default $docker | into bool
    let use_encode = $env | get -i SLIDESDOWN_ENCODE | default $encode | into bool
    let use_port = $env | get -i SLIDESDOWN_PORT | default $port | into int
    let use_service = $env | get -i SLIDESDOWN_SERVICE | default $service | into string
    let use_image = $env | get -i SLIDESDOWN_IMAGE | default (if ($image | is-not-empty) {$image} else {$IMAGE}) | into string
    let use_multiplex = $env | get -i SLIDESDOWN_MULTIPLEX | default $multiplex | into bool
    let use_publish = $env | get -i SLIDESDOWN_PUBLISH | default $publish | into bool
    let use_export = $env | get -i SLIDESDOWN_EXPORT | default $export | into bool
    let use_output = $env | get -i SLIDESDOWN_OUTPUT | default $output | into string
    let use_resolution = $env | get -i SLIDESDOWN_RESOLUTION | default $resolution | into string
    let use_no_open = $env | get -i SLIDESDOWN_NO_OPEN | default $no_open | into bool
    let use_verbose = $env | get -i SLIDESDOWN_VERBOSE | default $verbose | into bool

    # Compute URLs to the service
    let base = { scheme: http, host: localhost, port: $use_port }
    let baseService = if $use_docker { $base } else {$base | reject port | merge {scheme: https, host: $use_service }}
    let url = if $use_encode {
      ({...$baseService, params: {slides64: (open --raw $slides_filename | gzip -9 | | encode base64 --url)}})
    } else {
      let slides = if $use_docker {
        ([slides $slides_filename] | path join)
      } else {
        ([($base | url join) slides $slides_filename ] | path join)
      }
      ({...$baseService, params: {slides: $slides}})
    }
    mut tunnel_url = $url | reject -i port

    if $use_export {
      # extract frontmatter
      let markdown = open --raw $slides_filename | lines
      let frontmatter = if ($markdown | get -i 0 | $in == "---") {
        let _frontmatter = $markdown | drop nth 0 | take until { $in == "---" }
        if ($markdown | get -i ($_frontmatter | length | $in + 1)) != "---" { return {} }
        $_frontmatter | to text | from yaml
      } else {{}}
      let author = $frontmatter | get -i author | default ""
      let title = $frontmatter | get -i title | default ""
      let subject = $frontmatter | get -i subject | default ""
      let decktape_args = [--pause 500 --size $use_resolution --pdf-author $author --pdf-title $title --pdf-subject $subject reveal ($url | url join) $use_output]
      if $use_docker {
        let cmd = [docker run --net=host -u $"(id -u):(id -g)" --rm -t -v $"(pwd):/slides" $DECKTAPE_IMAGE ...$decktape_args]
        if $use_verbose {log info $"Running export command: ($cmd | str join ' ')"}
        run-external ...$cmd
      } else {
        let cmd = [decktape ...$decktape_args]
        if $use_verbose {log info $"Running export command: ($cmd | str join ' ')"}
        run-external ...$cmd
      }
      return
    } else {
      if $use_publish {
        log info "Establishing tunnel"
        if not $use_docker {
          log warning "Ignoring publish flag because the presentation isn't hosted via docker."
        } else {
          # TODO: Implement publish functionality
          let tunnel_output = mktemp -t slidesdown_tunnel_XXXX
          print $tunnel_output
          let tunnel_pid = mktemp -t slidesdown_tunnel_pid_XXXX
          let cmd = [cloudflared tunnel --url ($base | url join) --pidfile $tunnel_pid]
          if $use_verbose {log info $"Running command: ($cmd | str join ' ')"}
          let tunnel_job_id = job spawn -t tunnel {
            # run-external ...$cmd | tee --stderr { save -f $tunnel_output }
            bash -x -c $"trap \"xargs kill < ($tunnel_pid); rm -f '($tunnel_output)' '($tunnel_pid)'\" 1 2 3 15; ($cmd | str join ' ') 2>&1 | tee ($tunnel_output)"
          }
          mut i = 0
          let timeout = 20sec
          let sleep_for = 0.1sec
          while $i < ($timeout / $sleep_for)  {
            if (job list | where {$in.id == $tunnel_job_id} | length) == 0 {
              log error "Failed to establish tunnel, exiting."
              exit 1
            }
            if (open --raw $tunnel_output | lines | find "|  https://" | length) > 0 {
              break
            }
            sleep $sleep_for
            $i = $i + 1
          }
          log warning $"Tunnel established. You have to manually kill it after exiting slidesdown. Command:\ncat ($tunnel_pid) | xargs kill"
          let _tunnel_url = open --raw $tunnel_output | lines | find "|  https://" | parse --regex ".* \(?<tunnel>https://[^ ]*\) .*" | get -i 0.tunnel
          let _tunnel_url = $_tunnel_url | url parse
          $tunnel_url = $tunnel_url | upsert scheme $_tunnel_url.scheme | upsert host $_tunnel_url.host
        }
      }
    }

    # Create mutliplex configuration
    let multiplex_secret = random chars -l 40
    let multiplex_id = $multiplex_secret | hash sha256
    let multiplex_presenter_url = $url | upsert params.multiplex64 ({id: $multiplex_id, secret: $multiplex_secret} | to json | encode base64 --url)
    let multiplex_client_url = $url | upsert params.multiplex64 ({id: $multiplex_id} | to json | encode base64 --url)
    let tunnel_multiplex_presenter_url = $tunnel_url | upsert params.multiplex64 ({id: $multiplex_id, secret: $multiplex_secret} | to json | encode base64 --url)
    let tunnel_multiplex_client_url = $tunnel_url | upsert params.multiplex64 ({id: $multiplex_id} | to json | encode base64 --url)

    if $use_docker {
      ## slidesdown in docker container
      let CONTAINER_SLIDES_DIRECTORY = "/srv/slides"
      let CONTAINER_SLIDES_PORT = 8080
      let name = $"slidesdown_(random chars -l 20)"
      let cmd = [docker run -d --name $name --rm -v $"($root_directory)/:($CONTAINER_SLIDES_DIRECTORY)" -p $"($use_port):($CONTAINER_SLIDES_PORT)" $use_image]
      if $use_verbose {log info $"Running command: ($cmd | str join ' ')"}
      # let jobid = job spawn -t slidesdown { run-external ...$cmd }
      let container_id = run-external ...$cmd
      # INFO: due to nushell not supporting traps (https://github.com/nushell/nushell/issues/8360), bash needs to be
      # used to kill the container when the script ends
      if true {
        bash -c $"
        trap 'docker kill ($container_id) >/dev/null' 1 2 3 15
        echo 'Waiting for container to start..'
        sleep 2
        if ($use_multiplex | into string); then
          if ($use_publish | into string) && ($use_docker | into string); then
            echo 'Public slideshow Presenter URL \(keep secret!\): ($tunnel_multiplex_presenter_url | url join)'
            echo 'Public slideshow Follower URL: ($tunnel_multiplex_client_url | url join)'
          fi
          echo 'Local slideshow Presenter URL \(keep secret!\): ($multiplex_presenter_url | url join)'
          echo 'Local slideshow Follower URL: ($multiplex_client_url | url join)'
        else
          if ($use_publish | into string) && ($use_docker | into string); then
            echo 'Public slideshow URL: ($tunnel_url | url join)'
          fi
          echo 'Local slideshow URL: ($url | url join)'
        fi
        if (url-opener $use_no_open | is-not-empty | into string); then
          '(url-opener $use_no_open)' '(if $use_multiplex {$multiplex_presenter_url} else {$url} | url join)' || true
        fi
        docker attach --sig-proxy=false ($container_id)
        "
      } else {
        ### currently not use until trap is added to nushell
        let container_id = run-external ...$cmd
        print -e "Waiting for container to start.."
        sleep 2sec
        if $use_multiplex {
          print -e $"Local slideshow Presenter URL \(keep secret!\): ($multiplex_presenter_url | url join)"
          print -e $"Local slideshow Follower URL: ($multiplex_client_url | url join)"
        } else {
          print -e $"Local slideshow URL: ($url | url join)"
        }
        if (url-opener $use_no_open | is-not-empty) {
          do {run-external (url-opener $use_no_open) (if $use_multiplex {$multiplex_presenter_url} else {$url} | url join)} | ignore
        }
        print -e $"Kill process via:\ndocker kill ($container_id)"
        docker attach --sig-proxy=false $container_id
        # TODO: find a way to kill the process when the kill signal has been received
        # docker kill $container_id
      }
    } else {
      ## slidesdown service with slides served by a local web server
      if true {
        let server_cmd = create-webserver-cmd
        bash -c $"
        trap \"rm -f '($server_cmd)'\" 1 2 3 15
        python3 \"($server_cmd)\" localhost ($use_port) &
        if ($use_multiplex | into string); then
          echo 'Local slideshow Presenter URL \(keep secret!): ($multiplex_presenter_url | url join)'
          echo 'Local slideshow Follower URL: ($multiplex_client_url | url join)'
        else
          echo 'Local slideshow URL: ($url | url join)'
        fi
        if (url-opener $use_no_open | is-not-empty | into string); then
          '(url-opener $use_no_open)' '(if $use_multiplex {$multiplex_presenter_url} else {$url} | url join)' || true
        fi
        trap \"kill %1\" 1 2 3 15
        wait %1
        "
      } else {
        ### currently not use until trap is added to nushell
        # INFO: can't use job spawn until trap has been implemented
        # return (job spawn { python3 $server_cmd localhost $port; rm $server_cmd })
        # let job_id = run-webserver $use_port ($use_filename | path expand | path dirname) ($use_filename | path basename)
        let server_cmd = create-webserver-cmd
        let job_id = job spawn -t slidesdown {
          bash -c $"trap \"rm -f '($server_cmd)'\" 1 2 3 15; python3 "($server_cmd)" localhost ($port)"
        }
        # INFO: can't use job spawn until trap has been implemented
        # return (job spawn { python3 $server_cmd localhost $port; rm $server_cmd })
        if $use_multiplex {
          print -e $"Local slideshow Presenter URL \(keep secret!\): ($multiplex_presenter_url | url join)"
          print -e $"Local slideshow Follower URL: ($multiplex_client_url | url join)"
        } else {
          print -e $"Local slideshow URL: ($url | url join)"
        }
        if (url-opener $use_no_open | is-not-empty) {
          do {run-external (url-opener $use_no_open) (if $use_multiplex {$multiplex_presenter_url} else {$url} | url join)} | ignore
        }
        print (job list)
        try {
          job recv
        } catch {
          log info "Ending slidesdown"
        }
        job kill $job_id
      }
    }
  }
}

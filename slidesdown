#!/usr/bin/env bash
set -euo pipefail
# set -x

VERSION="0.18.11"

echo "WARNING: slidesdown CLI is deprecated, migrate to slidesdown.nu CLI" 1>&2

# TODO: convert to subcommands

urlencode() {
	# Source: https://gist.github.com/cdown/1163649
	local LC_ALL=C # support unicode = loop bytes, not characters
	local LC_COLLATE=C
	local l=${#1}
	for ((i = 0; i < l; i++)); do
		local c=${1:i:1}
		case "$c" in
		[a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
		' ') printf + ;;
		*) printf '%%%.2X' "'$c" ;;
		esac
	done
}

# Generate a string consisting of random characters.
randomchars() {
	local chars=abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
	for i in {1..20}; do
		echo -n "${chars:RANDOM%${#chars}:1}"
	done
}

compute_url() {
	local SERVICE="$1"
	local SLIDES="$2"
	echo "${SERVICE}/?slides=$(urlencode "${SLIDES}")"
}

compute_url64() {
	local SERVICE="$1"
	local SLIDES="$2"
	echo "${SERVICE}/?slides64=$(urlencode "${SLIDES}")"
}

run_webserver() {
	local PORT="$1"
	local ROOT_DIRECTORY="$2"
	local SLIDES="$3"
	local SERVER_CMD

	SERVER_CMD="$(mktemp --tmpdir slidedown_http_server_XXXX.py)"
	trap "rm -f '${SERVER_CMD}'" 1 2 3 15
	cat >"${SERVER_CMD}" <<END
#!/usr/bin/env python3
# It's python3 -m http.server PORT for a CORS world
from http.server import HTTPServer, SimpleHTTPRequestHandler
import sys

class CORSRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', '*')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')
        return super(CORSRequestHandler, self).end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()

    def translate_path(self, path):
        # Strip /slides prefix from path to make it compatible with docker container
        return super().translate_path(path.lstrip("/slides/"))

host = sys.argv[1] if len(sys.argv) > 2 else 'localhost'
port = int(sys.argv[len(sys.argv)-1]) if len(sys.argv) > 1 else 8080

print("Listening on http://{}:{}".format(host, port))
httpd = HTTPServer((host, port), CORSRequestHandler)
try:
    httpd.serve_forever()
except KeyboardInterrupt:
    print("Stopping http server")
    sys.exit(0)
END

	cd "${ROOT_DIRECTORY}"
	python3 "${SERVER_CMD}" "localhost" "${PORT}"
}

export_pdf() {
	local DOCKER="$1"
	local URL="$2"
	local URL_MARKDOWN="$3"
	local RESOLUTION="$4"
	local FILE="$5"
	local FRONTMATTER=""
	local AUTHOR=""
	local TITLE=""
	local SUBJECT=""
	if [[ -n "${URL_MARKDOWN}" ]]; then
		FRONTMATTER="$(curl -sfL "${URL_MARKDOWN}" | sed -n -e '/^---$/,/^---$/p' | sed -e '1d;/^---$/,$d')"
		AUTHOR="$(echo "${FRONTMATTER}" | yq .author)"
		TITLE="$(echo "${FRONTMATTER}" | yq .title)"
		SUBJECT="$(echo "${FRONTMATTER}" | yq .subject)"
	fi
	if [[ -z "${DOCKER}" ]]; then
		decktape --pause 500 --size "${RESOLUTION}" --pdf-author "${AUTHOR}" --pdf-title "${TITLE}" --pdf-subject "${SUBJECT}" reveal "${URL}" "${FILE}"
	else
		# https://github.com/astefanutti/decktape/pkgs/container/decktape
		docker run --net=host -u "$(id -u):$(id -g)" --rm -t -v "${PWD}:/slides" "ghcr.io/astefanutti/decktape:3.14" --pause 500 --size "${RESOLUTION}" --pdf-author "${AUTHOR}" --pdf-title "${TITLE}" --pdf-subject "${SUBJECT}" reveal "${URL}" "${FILE}"
	fi
}

open_url() {
	local NO_OPEN="$1"
	local URL="$2"

	if [[ -n "${NO_OPEN}" ]]; then
		return
	fi

	local COMMAND
	if which xdg-open &>/dev/null; then
		COMMAND=xdg-open
	elif which open-cli &>/dev/null; then
		COMMAND=open-cli
	elif which open-cli &>/dev/null; then
		COMMAND=open
	else
		echo "ERROR: no command found to open URLs with. Supported: xdg-open, open-cli, open" 1>&2
		return 1
	fi
	"${COMMAND}" "${URL}" &>/dev/null
}

main() {
	local SCRIPT_NAME="${1}"
	shift

	local TEMP
	TEMP=$(getopt -o 'bhedmnuvtPo:p:i:r:s:' --long 'base64,help,template,export,docker,no-open,update,version,multiplex,publish,output:,port:,image:,resolution:service:' -n "$(basename "${SCRIPT_NAME}")" -- "$@")

	# Note the quotes around "$TEMP": they are essential!
	eval set -- "$TEMP"
	unset TEMP

	while true; do
		case "$1" in
		'-h' | '--help')
			echo "USAGE: $(basename "${0}") [OPTIONS] [FILENAME]"
			echo "OPTIONS (options can also be set via environment variable):"
			echo -e '  -h|--help\tPrint this usage information'
			echo
			echo -e '  -s|--service\tOnline service to use for presenting the slideshow, instead of docker (default: slidesdown.github.io, env: SLIDESDOWN_SERVICE)'
			echo -e '  -b|--base64\tBase64 encode slideshow in the URL so that the presentation can be shared via URL without it being publicly available (env: SLIDESDOWN_ENCODE)'
			echo
			echo -e '  -d|--docker\tRun slideshow service locally via docker (default: run a local http server via Python3 and connect to the online service, env: SLIDESDOWN_DOCKER)'
			echo -e "  -i|--image\tUse docker image (default: slidesdown/slidesdown:${VERSION}, env: SLIDESDOWN_IMAGE)"
			echo -e '  -m|--multiplex\tOpen presentation in multiplex mode so that presenter and follower can always see the same slide - pairs well with the --publish flag (default: multiplex is disabled, env: SLIDESDOWN_MULTIPLEX)'
			echo -e '  -p|--port\tOpen slideshow service at port (default: 3000, env: SLIDESDOWN_PORT)'
			echo -e '  -P|--publish\tPublish locally docker-hosted presentation on the internet via a CloudFlare tunnel (default: do not publish the presentation, env: SLIDESDOWN_PUBLISH)'
			echo
			echo -e '  -e|--export\tExport slideshow as PDF - if exporting from a local docker instance repeat the options that were used to start the service when using this option (env: SLIDESDOWN_EXPORT)'
			echo -e '  -o|--output\tWrite export to this filename (default: <SLIDES_FILE>.pdf, env: SLIDESDOWN_OUTPUT)'
			echo -e '  -r|--resolution\tExport resolution (default: 1600x900, env: SLIDESDOWN_RESOLUTION)'
			echo
			echo -e '  -t|--template\tCreate SLIDES.md template (default: https://raw.githubusercontent.com/slidesdown/slidesdown/main/examples/SLIDES.md, env: SLIDESDOWN_TEMPLATE)'
			echo
			echo -e '  -n|--no-open\tDo not open browser at the start (env: SLIDESDOWN_NO_OPEN)'
			echo -e '  -u|--update\tUpdate slidesdown script (env: SLIDESDOWN_UPDATE)'
			echo -e '  -v|--version\tPrint script version'
			echo "FILENAME: default SLIDES.md"
			echo
			echo "Attention: only the docker service provides hot-reloading when changes are made to the slideshow!"
			echo
			echo "Website: https://github.com/slidesdown/slidesdown"
			exit
			;;
		'-b' | '--base64')
			local SLIDESDOWN_ENCODE=1
			shift
			continue
			;;
		'-d' | '--docker')
			local SLIDESDOWN_DOCKER=1
			shift
			continue
			;;
		'-e' | '--export')
			local SLIDESDOWN_EXPORT=1
			shift
			continue
			;;
		'-m' | '--multiplex')
			local SLIDESDOWN_MULTIPLEX="1"
			shift 1
			continue
			;;
		'-p' | '--port')
			local SLIDESDOWN_PORT="${2}"
			shift 2
			continue
			;;
		'-P' | '--publish')
			local SLIDESDOWN_PUBLISH="1"
			shift 1
			continue
			;;
		'-i' | '--image')
			local SLIDESDOWN_IMAGE="${2}"
			shift 2
			continue
			;;
		'-r' | '--resolution')
			local SLIDESDOWN_RESOLUTION="${2}"
			shift 2
			continue
			;;
		'-s' | '--service')
			local SLIDESDOWN_SERVICE="${2}"
			shift 2
			continue
			;;
		'-n' | '--no-open')
			local SLIDESDOWN_NO_OPEN=1
			shift
			continue
			;;
		'-o' | '--output')
			local SLIDESDOWN_OUTPUT="${2}"
			shift 2
			continue
			;;
		'-t' | '--template')
			if [ -e SLIDES.md ]; then
				echo "File already exists: SLIDES.md" >&2
				exit 1
			else
				curl -sfLo SLIDES.md "${TEMPLATE:-https://raw.githubusercontent.com/slidesdown/slidesdown/main/examples/SLIDES.md}"
				echo "Created SLIDES.md. Happy sliding :-)"
			fi
			exit
			;;
		'-u' | '--update')
			UPDATE_URL="https://raw.githubusercontent.com/slidesdown/slidesdown/main/slidesdown"
			echo "Updating ${SCRIPT_NAME}, version ${VERSION}, from ${UPDATE_URL}" 1>&2
			SCRIPT_TEMP="$(mktemp --tmpdir "$(basename "${SCRIPT_NAME}")_XXXX")"
			trap "rm -f '${SCRIPT_TEMP}'; '${SCRIPT_NAME}' -v" 0 1 2 3 15
			curl -sfLo "${SCRIPT_TEMP}" "${UPDATE_URL}"
			trap "cat '${SCRIPT_TEMP}' > '${SCRIPT_NAME}'; rm -f '${SCRIPT_TEMP}'; '${SCRIPT_NAME}' -v" 0
			echo "complete" 1>&2
			exit
			;;
		'-v' | '--version')
			echo "${VERSION}"
			exit
			;;
		'--')
			shift
			break
			;;
		*)
			echo 'Internal error!' >&2
			exit 1
			;;
		esac
	done

	local ENCODE="${SLIDESDOWN_ENCODE:-}"
	local DOCKER="${SLIDESDOWN_DOCKER:-}"
	local EXPORT="${SLIDESDOWN_EXPORT:-}"
	local MULTIPLEX="${SLIDESDOWN_MULTIPLEX:-}"
	local MULTIPLEX_SERVER
	local MULTIPLEX_CLIENT
	local PORT="${SLIDESDOWN_PORT:-3000}"
	local PUBLISH="${SLIDESDOWN_PUBLISH:-}"
	local IMAGE="${SLIDESDOWN_IMAGE:-slidesdown/slidesdown:${VERSION}}"
	local SERVICE="${SLIDESDOWN_SERVICE:-https://slidesdown.github.io}"
	local RESOLUTION="${SLIDESDOWN_RESOLUTION:-1600x900}"
	local NO_OPEN="${SLIDESDOWN_NO_OPEN:-}"

	local SLIDES
	SLIDES="${1:-SLIDES.md}"
	if [[ -z "${EXPORT}" ]] && [[ ! -e "$SLIDES" ]]; then
		echo "File doesn't exist: ${SLIDES}" 1>&2
		exit 1
	fi
	local OUTPUT="${OUTPUT:-${SLIDES%%.*}.pdf}"
	# To simplify the handling of subdirectories, split filname into the root
	# directory and the slides file
	local ROOT_DIRECTORY
	ROOT_DIRECTORY="$(readlink -f "$(dirname "${SLIDES}")")"
	SLIDES="$(basename "${SLIDES}")"
	local URL
	local URL_MARKDOWN

	# Generate multiplex secret and URL parameter
	local MULTIPLEX_SECRET
	MULTIPLEX_SECRET="$(randomchars)"
	local MULTIPLEX_ID
	MULTIPLEX_ID="$(echo -n "${MULTIPLEX_SECRET}" | sha256sum | awk '{print $1}')"
	MULTIPLEX_SERVER="multiplex64=$(echo "{}" | MULTIPLEX_ID="$MULTIPLEX_ID" MULTIPLEX_SECRET="$MULTIPLEX_SECRET" yq -o json '{"id": strenv(MULTIPLEX_ID), "secret": strenv(MULTIPLEX_SECRET)}' | basenc --base64url -w 0)"
	MULTIPLEX_CLIENT="multiplex64=$(echo "{}" | MULTIPLEX_ID="$MULTIPLEX_ID" yq -o json '{"id": strenv(MULTIPLEX_ID)}' | basenc --base64url -w 0)"

	if [[ -n "${DOCKER}" ]]; then
		URL="$(compute_url "http://localhost:${PORT}" "slides/${SLIDES}")"
		URL_MARKDOWN="http://localhost:${PORT}/slides/${SLIDES}"
	else
		if [[ -n "${ENCODE}" ]]; then
			URL="$(compute_url64 "${SERVICE}" "$(gzip -9 <"${ROOT_DIRECTORY}/${SLIDES}" | basenc --base64url -w 0 | sed -e 's/=//g')")"
			URL_MARKDOWN=""
		else
			URL="$(compute_url "${SERVICE}" "http://localhost:${PORT}/slides/${SLIDES}")"
			URL_MARKDOWN="http://localhost:${PORT}/slides/${SLIDES}"
		fi
	fi
	if [[ -z "${EXPORT}" ]]; then
		if [[ -n "${PUBLISH}" ]]; then
			if [[ -z "${DOCKER}" ]]; then
				echo "Ignoring publish flag because the presentation isn't hosted via docker." 1>&2
			else
				local TUNNEL_OUTPUT
				local TUNNEL_URL
				TUNNEL_OUTPUT="$(mktemp)"
				(UNTUN_ACCEPT_CLOUDFLARE_NOTICE=1 npx untun@latest tunnel "http://localhost:${PORT}" | tee "${TUNNEL_OUTPUT}") &
				local TUNNEL_PID="$!"
				for ((i = 0; i < 10; i++)); do
					sleep 1
					if grep -q "Tunnel ready at https://" "${TUNNEL_OUTPUT}"; then
						break
					fi
				done
				# Wait a little to make sure that the tunnel is stable and working.
				sleep 1
				if ! grep -q "Tunnel ready at https://" "${TUNNEL_OUTPUT}" || ! ps -p "${TUNNEL_PID}" >/dev/null; then
					echo "Failed to set up tunnel. Please try again." 1>&2
					exit 1
				fi
				trap "kill '${TUNNEL_PID}'" 1 2 3 15
				TUNNEL_URL="$(compute_url "$(sed -ne 's#Tunnel ready at \(https://.*\)#\1#p' "${TUNNEL_OUTPUT}")" "slides/${SLIDES}")"
				echo
				echo "Published slideshow Presenter URL (keep secret!): ${TUNNEL_URL}&${MULTIPLEX_SERVER}"
				echo "Published slideshow Follower URL: ${TUNNEL_URL}&${MULTIPLEX_CLIENT}"
				if [[ -z "${MULTIPLEX}" ]]; then
					echo
					echo "Published slideshow URL: $TUNNEL_URL"
				fi
				echo
			fi
		fi
		if [[ -n "${DOCKER}" ]]; then
			local CONTAINER_SLIDES_DIRECTORY="/srv/slides"
			local CONTAINER_SLIDES_PORT="8080"
			local CONTAINER_ID
			CONTAINER_ID="$(docker run -d --rm -v "${ROOT_DIRECTORY}/:${CONTAINER_SLIDES_DIRECTORY}" -p "${PORT}:${CONTAINER_SLIDES_PORT}" "${IMAGE}")"
			trap "docker kill '${CONTAINER_ID}' >/dev/null" 1 2 3 15
			echo "Waiting for container to start.."
			sleep 2
			echo
			echo "Local slideshow Presenter URL (keep secret!): ${URL}&${MULTIPLEX_SERVER}"
			echo "Local slideshow Follower URL: ${URL}&${MULTIPLEX_CLIENT}"
			if [[ -n "${MULTIPLEX}" ]]; then
				URL="${URL}&${MULTIPLEX_SERVER}"
			else
				echo
				echo "Local slideshow URL: ${URL}"
			fi
			echo
			open_url "${NO_OPEN}" "${URL}" || true
			docker attach --sig-proxy=false "${CONTAINER_ID}"
		elif [[ -n "${ENCODE}" ]]; then
			if [[ -n "${MULTIPLEX}" ]]; then
				echo "Ignoring multiplex flag because the presentation isn't hosted via docker." 1>&2
			fi
			echo
			echo "Encoded slideshow URL: ${URL}"
			echo
			open_url "${NO_OPEN}" "${URL}"
		else
			run_webserver "${PORT}" "${ROOT_DIRECTORY}" "${SLIDES}" &
			echo
			echo "Local slideshow Presenter URL (keep secret!): ${URL}&${MULTIPLEX_SERVER}"
			echo "Local slideshow Follower URL: ${URL}&${MULTIPLEX_CLIENT}"
			if [[ -n "${MULTIPLEX}" ]]; then
				URL="${URL}&${MULTIPLEX_SERVER}"
			else
				echo
				echo "Local slideshow URL: ${URL}"
			fi
			echo
			open_url "${NO_OPEN}" "${URL}"
			wait %1
		fi
	else
		echo
		echo "Local slideshow URL: ${URL}"
		echo
		echo "Exporting as: ${OUTPUT}" >&2
		echo
		if [[ -n "${DOCKER}" ]]; then
			export_pdf "${DOCKER}" "${URL}" "${URL_MARKDOWN}" "${RESOLUTION}" "$(basename "${OUTPUT}")"
		else
			export_pdf "${DOCKER}" "${URL}" "${URL_MARKDOWN}" "${RESOLUTION}" "${OUTPUT}"
		fi
	fi
}

main "$(readlink -f "$0")" "${@}"
